<<<<<<< HEAD
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Regression with Linear Algebra - Lab\n",
    "\n",
    "## Introduction\n",
    "\n",
    "In this lab, we shall apply regression analysis using simple matrix manipulations to fit a model to given data, and then predict new values for previously unseen data. We shall follow the approach highlighted in previous lesson where we used numpy to build the appropriate matrices and vectors and solve for the $\\beta$ (unknown variables) vector. The beta vector will be used with test data to make new predictions. We shall also evaluate how good our model fit was. \n",
    "\n",
    "In order to make this experiment interesting. We shall use NumPy at every single stage of this experiment i.e. loading data, creating matrices, performing test train split, model fitting and evaluations.  \n",
    "\n",
    "## Objectives\n",
    "\n",
    "You will be able to:\n",
    "\n",
    "* Use linear algebra to apply simple regression modeling in Python and NumPy only\n",
    "* Apply train/test split using permutations in NumPy\n",
    "* Use matrix algebra with inverses and dot products to calculate the beta\n",
    "* Make predictions from the fitted model using previously unseen input features \n",
    "* Evaluate the fitted model by calculating the error between real and predicted values\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First let's import necessary libraries "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import csv # for reading csv file\n",
    "import numpy as np\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dataset \n",
    "\n",
    "The dataset we will use for this experiment is \"**Sales Prices in the City of Windsor, Canada**\", something very similar to the Boston Housing dataset. This dataset contains a number of input (independent) variables, including area, number of bedrooms/bathrooms, facilities(AC/garage) etc. and an output (dependent) variable, **price**. We shall formulate a linear algebra problem to find linear mappings from input to out features using the equation provided in the previous lesson. \n",
    "\n",
    "This will allow us to find a relationship between house features and house price for the given data, allowing us to find unknown prices for houses, given the input features.  \n",
    "\n",
    "A description of dataset and included features is available at [THIS LINK](https://rdrr.io/cran/Ecdat/man/Housing.html)\n",
    "\n",
    "In your repo, the dataset is available as `windsor_housing.csv` containing following variables:\n",
    "\n",
    "there are 11 input features (first 11 columns):\n",
    "\n",
    "\tlotsize\tbedrooms\tbathrms\tstories\tdriveway\trecroom\tfullbase\tgashw\tairco\tgaragepl\tprefarea\n",
    "\n",
    "and 1 output feature i.e. **price** (12th column). \n",
    "\n",
    "The focus of this lab is not really answering a preset analytical question, but to learn how we can perform a regression experiment, similar to one we performed in statsmodels, using mathematical manipulations. So we we wont be using any Pandas or statsmodels goodness here. The key objectives here are to a) understand regression with matrix algebra, and b) Mastery in NumPy scientific computation. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Stage 1: Prepare Data for Modeling \n",
    "\n",
    "Let's give you a head start by importing the dataset. We shall perform following steps to get the data ready for analysis:\n",
    "\n",
    "* Initialize an empty list `data` for loading data\n",
    "* Read the csv file containing complete (raw) `windsor_housing.csv`. [Use `csv.reader()` for loading data.](https://docs.python.org/3/library/csv.html). Store this in `data` one row at a time.\n",
    "\n",
    "* Drop the first row of csv file as it contains the names of variables (header) which won't be used during analysis (keeping this will cause errors as it contains text values).\n",
    "\n",
    "* Append a column of all 1s to the data (bias) as the first column\n",
    "\n",
    "* Convert `data` to a numpy array and inspect first few rows \n",
    "\n",
    "NOTE: `read.csv()` would read the csv as a text file, so we must convert the contents to float at some stage. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[1.0, 4000.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 38500.0],\n",
       " [1.0, 3060.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 49500.0],\n",
       " [1.0, 6650.0, 3.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 60500.0],\n",
       " [1.0, 6360.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 61000.0],\n",
       " [1.0, 4160.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 66000.0],\n",
       " [1.0, 3880.0, 3.0, 2.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 66000.0],\n",
       " [1.0, 4160.0, 3.0, 1.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 69000.0],\n",
       " [1.0, 4800.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 83800.0],\n",
       " [1.0, 5500.0, 3.0, 2.0, 4.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 88500.0],\n",
       " [1.0, 7200.0, 3.0, 2.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 3.0, 0.0, 90000.0],\n",
       " [1.0, 3000.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 30500.0],\n",
       " [1.0, 1700.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 27000.0],\n",
       " [1.0, 2880.0, 3.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 36000.0],\n",
       " [1.0, 3600.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 37000.0],\n",
       " [1.0, 3185.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 37900.0],\n",
       " [1.0, 3300.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 40500.0],\n",
       " [1.0, 5200.0, 4.0, 1.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 40750.0],\n",
       " [1.0, 3450.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 45000.0],\n",
       " [1.0, 3986.0, 2.0, 2.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 45000.0],\n",
       " [1.0, 4785.0, 3.0, 1.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 48500.0],\n",
       " [1.0, 4510.0, 4.0, 2.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 65900.0],\n",
       " [1.0, 4000.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 37900.0],\n",
       " [1.0, 3934.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 38000.0],\n",
       " [1.0, 4960.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 42000.0],\n",
       " [1.0, 3000.0, 2.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 42300.0],\n",
       " [1.0, 3800.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 43500.0],\n",
       " [1.0, 4960.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 44000.0],\n",
       " [1.0, 3000.0, 3.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 44500.0],\n",
       " [1.0, 4500.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 44900.0],\n",
       " [1.0, 3500.0, 2.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 45000.0],\n",
       " [1.0, 3500.0, 4.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 48000.0],\n",
       " [1.0, 4000.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 49000.0],\n",
       " [1.0, 4500.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 51500.0],\n",
       " [1.0, 6360.0, 2.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 61000.0],\n",
       " [1.0, 4500.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 61000.0],\n",
       " [1.0, 4032.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 61700.0],\n",
       " [1.0, 5170.0, 3.0, 1.0, 4.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 67000.0],\n",
       " [1.0, 5400.0, 4.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 82000.0],\n",
       " [1.0, 3150.0, 2.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 54500.0],\n",
       " [1.0, 3745.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 66500.0],\n",
       " [1.0, 4520.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 70000.0],\n",
       " [1.0, 4640.0, 4.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 82000.0],\n",
       " [1.0, 8580.0, 5.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 92000.0],\n",
       " [1.0, 2000.0, 2.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 38000.0],\n",
       " [1.0, 2160.0, 3.0, 1.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 44000.0],\n",
       " [1.0, 3040.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 41000.0],\n",
       " [1.0, 3090.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 43000.0],\n",
       " [1.0, 4960.0, 4.0, 1.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 48000.0],\n",
       " [1.0, 3350.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 54800.0],\n",
       " [1.0, 5300.0, 5.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 55000.0],\n",
       " [1.0, 4100.0, 4.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 57000.0],\n",
       " [1.0, 9166.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 68000.0],\n",
       " [1.0, 4040.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 95000.0],\n",
       " [1.0, 3630.0, 3.0, 3.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 38000.0],\n",
       " [1.0, 3620.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 25000.0],\n",
       " [1.0, 2400.0, 3.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 25245.0],\n",
       " [1.0, 7260.0, 3.0, 2.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 3.0, 0.0, 56000.0],\n",
       " [1.0, 4400.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 35500.0],\n",
       " [1.0, 2400.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 30000.0],\n",
       " [1.0, 4120.0, 2.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 48000.0],\n",
       " [1.0, 4750.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 48000.0],\n",
       " [1.0, 4280.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 52000.0],\n",
       " [1.0, 4820.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 54000.0],\n",
       " [1.0, 5500.0, 4.0, 1.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 56000.0],\n",
       " [1.0, 5500.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 60000.0],\n",
       " [1.0, 5040.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 60000.0],\n",
       " [1.0, 6000.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 67000.0],\n",
       " [1.0, 2500.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 47000.0],\n",
       " [1.0, 4095.0, 3.0, 1.0, 2.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 70000.0],\n",
       " [1.0, 4095.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 45000.0],\n",
       " [1.0, 3150.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 51000.0],\n",
       " [1.0, 1836.0, 2.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 32500.0],\n",
       " [1.0, 2475.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 34000.0],\n",
       " [1.0, 3210.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 35000.0],\n",
       " [1.0, 3180.0, 3.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 36000.0],\n",
       " [1.0, 1650.0, 3.0, 1.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 45000.0],\n",
       " [1.0, 3180.0, 4.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 47000.0],\n",
       " [1.0, 3180.0, 2.0, 2.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 55000.0],\n",
       " [1.0, 6360.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 63900.0],\n",
       " [1.0, 4240.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 50000.0],\n",
       " [1.0, 3240.0, 2.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 35000.0],\n",
       " [1.0, 3650.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 50000.0],\n",
       " [1.0, 3240.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 43000.0],\n",
       " [1.0, 3780.0, 2.0, 1.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 55500.0],\n",
       " [1.0, 6480.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 57000.0],\n",
       " [1.0, 5850.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 2.0, 0.0, 60000.0],\n",
       " [1.0, 3150.0, 3.0, 2.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 78000.0],\n",
       " [1.0, 3000.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 35000.0],\n",
       " [1.0, 3090.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 44000.0],\n",
       " [1.0, 6060.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 47000.0],\n",
       " [1.0, 5900.0, 4.0, 2.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 58000.0],\n",
       " [1.0, 7420.0, 4.0, 1.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 0.0, 163000.0],\n",
       " [1.0, 8500.0, 3.0, 2.0, 4.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 128000.0],\n",
       " [1.0, 8050.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 123500.0],\n",
       " [1.0, 6800.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 39000.0],\n",
       " [1.0, 8250.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 53900.0],\n",
       " [1.0, 8250.0, 3.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 3.0, 0.0, 59900.0],\n",
       " [1.0, 3500.0, 2.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 35000.0],\n",
       " [1.0, 2835.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 43000.0],\n",
       " [1.0, 4500.0, 3.0, 2.0, 2.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 57000.0],\n",
       " [1.0, 3300.0, 3.0, 3.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 79000.0],\n",
       " [1.0, 4320.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 1.0, 0.0, 2.0, 0.0, 125000.0],\n",
       " [1.0, 3500.0, 4.0, 2.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 132000.0],\n",
       " [1.0, 4992.0, 3.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 58000.0],\n",
       " [1.0, 4600.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 43000.0],\n",
       " [1.0, 3720.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 48000.0],\n",
       " [1.0, 3680.0, 3.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 58500.0],\n",
       " [1.0, 3000.0, 3.0, 2.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 73000.0],\n",
       " [1.0, 3750.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 63500.0],\n",
       " [1.0, 5076.0, 3.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 43000.0],\n",
       " [1.0, 4500.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 46500.0],\n",
       " [1.0, 5000.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 92000.0],\n",
       " [1.0, 4260.0, 4.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 75000.0],\n",
       " [1.0, 6540.0, 4.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 75000.0],\n",
       " [1.0, 3700.0, 4.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 85000.0],\n",
       " [1.0, 3760.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 93000.0],\n",
       " [1.0, 4000.0, 3.0, 2.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 94500.0],\n",
       " [1.0, 4300.0, 3.0, 2.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 106500.0],\n",
       " [1.0, 6840.0, 5.0, 1.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 116000.0],\n",
       " [1.0, 4400.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 61500.0],\n",
       " [1.0, 10500.0, 4.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 80000.0],\n",
       " [1.0, 4400.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 37000.0],\n",
       " [1.0, 4840.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 59500.0],\n",
       " [1.0, 4120.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 70000.0],\n",
       " [1.0, 4260.0, 4.0, 2.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 95000.0],\n",
       " [1.0, 5960.0, 3.0, 3.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 117000.0],\n",
       " [1.0, 8800.0, 3.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 122500.0],\n",
       " [1.0, 4560.0, 3.0, 2.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 123500.0],\n",
       " [1.0, 4600.0, 3.0, 2.0, 2.0, 1.0, 1.0, 0.0, 0.0, 1.0, 2.0, 0.0, 127000.0],\n",
       " [1.0, 4840.0, 2.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 35000.0],\n",
       " [1.0, 3850.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 44500.0],\n",
       " [1.0, 4900.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 49900.0],\n",
       " [1.0, 3850.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 50500.0],\n",
       " [1.0, 3760.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 65000.0],\n",
       " [1.0, 6000.0, 4.0, 2.0, 4.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 90000.0],\n",
       " [1.0, 4370.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 46000.0],\n",
       " [1.0, 7700.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 35000.0],\n",
       " [1.0, 2990.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 26500.0],\n",
       " [1.0, 3750.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 43000.0],\n",
       " [1.0, 3000.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 56000.0],\n",
       " [1.0, 2650.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 40000.0],\n",
       " [1.0, 4500.0, 4.0, 2.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 51000.0],\n",
       " [1.0, 4500.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 51000.0],\n",
       " [1.0, 4500.0, 3.0, 1.0, 2.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 57250.0],\n",
       " [1.0, 4500.0, 2.0, 1.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 44000.0],\n",
       " [1.0, 2175.0, 3.0, 1.0, 2.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 61000.0],\n",
       " [1.0, 4500.0, 3.0, 2.0, 3.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 62000.0],\n",
       " [1.0, 4800.0, 5.0, 2.0, 3.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 80000.0],\n",
       " [1.0, 4600.0, 4.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 50000.0],\n",
       " [1.0, 3450.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 59900.0],\n",
       " [1.0, 3000.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 35500.0],\n",
       " [1.0, 3600.0, 2.0, 2.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 37000.0],\n",
       " [1.0, 3600.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 42000.0],\n",
       " [1.0, 3750.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 48000.0],\n",
       " [1.0, 2610.0, 4.0, 3.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 60000.0],\n",
       " [1.0, 2953.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 60000.0],\n",
       " [1.0, 2747.0, 4.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 60000.0],\n",
       " [1.0, 1905.0, 5.0, 1.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 62000.0],\n",
       " [1.0, 3968.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 63000.0],\n",
       " [1.0, 3162.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 63900.0],\n",
       " [1.0, 6000.0, 4.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 130000.0],\n",
       " [1.0, 2910.0, 3.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 25000.0],\n",
       " [1.0, 2135.0, 3.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 50000.0],\n",
       " [1.0, 3120.0, 3.0, 1.0, 2.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 52900.0],\n",
       " [1.0, 4075.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 2.0, 0.0, 62000.0],\n",
       " [1.0, 3410.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 73500.0],\n",
       " [1.0, 2800.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 38000.0],\n",
       " [1.0, 2684.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 46000.0],\n",
       " [1.0, 3100.0, 3.0, 1.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 48000.0],\n",
       " [1.0, 3630.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 52500.0],\n",
       " [1.0, 1950.0, 3.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 32000.0],\n",
       " [1.0, 2430.0, 3.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 38000.0],\n",
       " [1.0, 4320.0, 3.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 46000.0],\n",
       " [1.0, 3036.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 50000.0],\n",
       " [1.0, 3630.0, 3.0, 2.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 57500.0],\n",
       " [1.0, 5400.0, 4.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 70000.0],\n",
       " [1.0, 3420.0, 4.0, 2.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 69900.0],\n",
       " [1.0, 3180.0, 3.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 74500.0],\n",
       " [1.0, 3660.0, 4.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 42000.0],\n",
       " [1.0, 4410.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 60000.0],\n",
       " [1.0, 3990.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 50000.0],\n",
       " [1.0, 4340.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 58000.0],\n",
       " [1.0, 3510.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 63900.0],\n",
       " [1.0, 3420.0, 5.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 28000.0],\n",
       " [1.0, 3420.0, 2.0, 1.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 54000.0],\n",
       " [1.0, 5495.0, 3.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 44700.0],\n",
       " [1.0, 3480.0, 4.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 47000.0],\n",
       " [1.0, 7424.0, 3.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 50000.0],\n",
       " [1.0, 3460.0, 4.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 57250.0],\n",
       " [1.0, 3630.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 67000.0],\n",
       " [1.0, 3630.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 52500.0],\n",
       " [1.0, 3480.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 42000.0],\n",
       " [1.0, 3460.0, 3.0, 2.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 57500.0],\n",
       " [1.0, 3180.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 33000.0],\n",
       " [1.0, 3635.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 34400.0],\n",
       " [1.0, 3960.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 40000.0],\n",
       " [1.0, 4350.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 40500.0],\n",
       " [1.0, 3930.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 46500.0],\n",
       " [1.0, 3570.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 52000.0],\n",
       " [1.0, 3600.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 53000.0],\n",
       " [1.0, 2520.0, 5.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 53900.0],\n",
       " [1.0, 3480.0, 3.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 50000.0],\n",
       " [1.0, 3180.0, 4.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 55500.0],\n",
       " [1.0, 3290.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 56000.0],\n",
       " [1.0, 4000.0, 4.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 60000.0],\n",
       " [1.0, 2325.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 60000.0],\n",
       " [1.0, 4350.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 69500.0],\n",
       " [1.0, 3540.0, 2.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 72000.0],\n",
       " [1.0, 3960.0, 3.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 92500.0],\n",
       " [1.0, 2640.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 40500.0],\n",
       " [1.0, 2700.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 42000.0],\n",
       " [1.0, 2700.0, 3.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 47900.0],\n",
       " [1.0, 3180.0, 3.0, 1.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 52000.0],\n",
       " [1.0, 3500.0, 4.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 62000.0],\n",
       " [1.0, 3630.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 41000.0],\n",
       " [1.0, 6000.0, 4.0, 3.0, 2.0, 1.0, 1.0, 1.0, 1.0, 0.0, 2.0, 0.0, 138300.0],\n",
       " [1.0, 3150.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 42000.0],\n",
       " [1.0, 3792.0, 4.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 47000.0],\n",
       " [1.0, 3510.0, 3.0, 1.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 64500.0],\n",
       " [1.0, 3120.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 46000.0],\n",
       " [1.0, 3000.0, 4.0, 1.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 58000.0],\n",
       " [1.0, 4200.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 70100.0],\n",
       " [1.0, 2817.0, 4.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 78500.0],\n",
       " [1.0, 3240.0, 4.0, 1.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 87250.0],\n",
       " [1.0, 2800.0, 3.0, 2.0, 2.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 70800.0],\n",
       " [1.0, 3816.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 56000.0],\n",
       " [1.0, 3185.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 48000.0],\n",
       " [1.0, 6321.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 68000.0],\n",
       " [1.0, 3650.0, 3.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 79000.0],\n",
       " [1.0, 4700.0, 4.0, 1.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 80000.0],\n",
       " [1.0, 6615.0, 4.0, 2.0, 2.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 87000.0],\n",
       " [1.0, 3850.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 25000.0],\n",
       " [1.0, 3970.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 32500.0],\n",
       " [1.0, 3000.0, 2.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 36000.0],\n",
       " [1.0, 4352.0, 4.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 42500.0],\n",
       " [1.0, 3630.0, 4.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 43000.0],\n",
       " [1.0, 3600.0, 6.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 50000.0],\n",
       " [1.0, 3000.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 26000.0],\n",
       " [1.0, 3000.0, 4.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 30000.0],\n",
       " [1.0, 2787.0, 4.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 34000.0],\n",
       " [1.0, 3000.0, 2.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 52000.0],\n",
       " [1.0, 4770.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 70000.0],\n",
       " [1.0, 3649.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 27000.0],\n",
       " [1.0, 3970.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 32500.0],\n",
       " [1.0, 2910.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 37200.0],\n",
       " [1.0, 3480.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 38000.0],\n",
       " [1.0, 6615.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 42000.0],\n",
       " [1.0, 3500.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 44500.0],\n",
       " [1.0, 3450.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 45000.0],\n",
       " [1.0, 3450.0, 3.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 48500.0],\n",
       " [1.0, 3520.0, 2.0, 2.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 52000.0],\n",
       " [1.0, 6930.0, 4.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 53900.0],\n",
       " [1.0, 4600.0, 3.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 60000.0],\n",
       " [1.0, 4360.0, 4.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 61000.0],\n",
       " [1.0, 3450.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 64500.0],\n",
       " [1.0, 4410.0, 4.0, 3.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 71000.0],\n",
       " [1.0, 4600.0, 2.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 75500.0],\n",
       " [1.0, 3640.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 33500.0],\n",
       " [1.0, 6000.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 41000.0],\n",
       " [1.0, 5400.0, 4.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 41000.0],\n",
       " [1.0, 3640.0, 4.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 46200.0],\n",
       " [1.0, 3640.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 48500.0],\n",
       " [1.0, 4040.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 48900.0],\n",
       " [1.0, 3640.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 50000.0],\n",
       " [1.0, 3640.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 51000.0],\n",
       " [1.0, 5640.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 52500.0],\n",
       " [1.0, 3600.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 52500.0],\n",
       " [1.0, 3600.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 54000.0],\n",
       " [1.0, 4632.0, 4.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 59000.0],\n",
       " [1.0, 3640.0, 3.0, 2.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 60000.0],\n",
       " [1.0, 4900.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 63000.0],\n",
       " [1.0, 4510.0, 4.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 64000.0],\n",
       " [1.0, 4100.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 64900.0],\n",
       " [1.0, 3640.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 65000.0],\n",
       " [1.0, 5680.0, 3.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 66000.0],\n",
       " [1.0, 6300.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 70000.0],\n",
       " [1.0, 4000.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 65500.0],\n",
       " [1.0, 3960.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 57000.0],\n",
       " [1.0, 5960.0, 3.0, 1.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 52000.0],\n",
       " [1.0, 5830.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 54000.0],\n",
       " [1.0, 4500.0, 4.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 74500.0],\n",
       " [1.0, 4100.0, 3.0, 2.0, 3.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 90000.0],\n",
       " [1.0, 6750.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 45000.0],\n",
       " [1.0, 9000.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 45000.0],\n",
       " [1.0, 2550.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 65000.0],\n",
       " [1.0, 7152.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 55000.0],\n",
       " [1.0, 6450.0, 4.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 62000.0],\n",
       " [1.0, 3360.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 30000.0],\n",
       " [1.0, 3264.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 34000.0],\n",
       " [1.0, 4000.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 38000.0],\n",
       " [1.0, 4000.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 39000.0],\n",
       " [1.0, 3069.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 45000.0],\n",
       " [1.0, 4040.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 47000.0],\n",
       " [1.0, 4040.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 47500.0],\n",
       " [1.0, 3185.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 49000.0],\n",
       " [1.0, 5900.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 50000.0],\n",
       " [1.0, 3120.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 50000.0],\n",
       " [1.0, 5450.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 52900.0],\n",
       " [1.0, 4040.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 53000.0],\n",
       " [1.0, 4080.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 55000.0],\n",
       " [1.0, 8080.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 56000.0],\n",
       " [1.0, 4040.0, 2.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 58500.0],\n",
       " [1.0, 4080.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 59500.0],\n",
       " [1.0, 5800.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 60000.0],\n",
       " [1.0, 5885.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 64000.0],\n",
       " [1.0, 9667.0, 4.0, 2.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 67000.0],\n",
       " [1.0, 3420.0, 4.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 68100.0],\n",
       " [1.0, 5800.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 70000.0],\n",
       " [1.0, 7600.0, 4.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 72000.0],\n",
       " [1.0, 5400.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 57500.0],\n",
       " [1.0, 4995.0, 4.0, 2.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 69900.0],\n",
       " [1.0, 3000.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 70000.0],\n",
       " [1.0, 5500.0, 3.0, 2.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 75000.0],\n",
       " [1.0, 6450.0, 3.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 76900.0],\n",
       " [1.0, 6210.0, 4.0, 1.0, 4.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 78000.0],\n",
       " [1.0, 5000.0, 3.0, 1.0, 4.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 80000.0],\n",
       " [1.0, 5000.0, 3.0, 1.0, 3.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 82000.0],\n",
       " [1.0, 5828.0, 4.0, 1.0, 4.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 83000.0],\n",
       " [1.0, 5200.0, 3.0, 1.0, 3.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 83000.0],\n",
       " [1.0, 5500.0, 3.0, 1.0, 3.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 83900.0],\n",
       " [1.0, 6350.0, 3.0, 2.0, 3.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 88500.0],\n",
       " [1.0, 8250.0, 3.0, 2.0, 3.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 93000.0],\n",
       " [1.0, 6000.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 98000.0],\n",
       " [1.0, 7700.0, 3.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 98500.0],\n",
       " [1.0, 8880.0, 3.0, 2.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 99000.0],\n",
       " [1.0, 8880.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 101000.0],\n",
       " [1.0, 6480.0, 3.0, 2.0, 4.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 110000.0],\n",
       " [1.0, 7000.0, 3.0, 2.0, 4.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 115442.0],\n",
       " [1.0, 8875.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 120000.0],\n",
       " [1.0, 7155.0, 3.0, 2.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 0.0, 124000.0],\n",
       " [1.0, 8960.0, 4.0, 4.0, 4.0, 1.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 175000.0],\n",
       " [1.0, 7350.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 50000.0],\n",
       " [1.0, 3850.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 55000.0],\n",
       " [1.0, 7000.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 60000.0],\n",
       " [1.0, 7770.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 61000.0],\n",
       " [1.0, 7440.0, 3.0, 2.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 106000.0],\n",
       " [1.0, 7500.0, 3.0, 3.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 155000.0],\n",
       " [1.0, 8100.0, 4.0, 1.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 1.0, 141000.0],\n",
       " [1.0, 3900.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 62500.0],\n",
       " [1.0, 2970.0, 3.0, 1.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 70000.0],\n",
       " [1.0, 3000.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 73000.0],\n",
       " [1.0, 10500.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 80000.0],\n",
       " [1.0, 5500.0, 3.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 80000.0],\n",
       " [1.0, 4500.0, 3.0, 1.0, 4.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 88000.0],\n",
       " [1.0, 3850.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 49000.0],\n",
       " [1.0, 4130.0, 3.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 52000.0],\n",
       " [1.0, 4046.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 59500.0],\n",
       " [1.0, 4079.0, 3.0, 1.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 60000.0],\n",
       " [1.0, 4000.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 64000.0],\n",
       " [1.0, 9860.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 64500.0],\n",
       " [1.0, 7000.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 68500.0],\n",
       " [1.0, 7980.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 78500.0],\n",
       " [1.0, 6800.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 2.0, 0.0, 86000.0],\n",
       " [1.0, 4300.0, 6.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 86900.0],\n",
       " [1.0, 10269.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 75000.0],\n",
       " [1.0, 6100.0, 3.0, 1.0, 3.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 78000.0],\n",
       " [1.0, 6420.0, 3.0, 2.0, 3.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 95000.0],\n",
       " [1.0, 12090.0, 4.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 97000.0],\n",
       " [1.0, 6600.0, 3.0, 1.0, 4.0, 1.0, 0.0, 0.0, 0.0, 1.0, 3.0, 1.0, 107000.0],\n",
       " [1.0, 6600.0, 4.0, 2.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 130000.0],\n",
       " [1.0, 8580.0, 4.0, 3.0, 4.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 145000.0],\n",
       " [1.0, 9960.0, 3.0, 2.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 2.0, 1.0, 175000.0],\n",
       " [1.0, 10700.0, 3.0, 1.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 72000.0],\n",
       " [1.0, 15600.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 84900.0],\n",
       " [1.0, 13200.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 99000.0],\n",
       " [1.0, 9000.0, 4.0, 2.0, 4.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 114000.0],\n",
       " [1.0, 7950.0, 5.0, 2.0, 2.0, 1.0, 0.0, 1.0, 1.0, 0.0, 2.0, 0.0, 120000.0],\n",
       " [1.0, 16200.0, 5.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 145000.0],\n",
       " [1.0, 6100.0, 3.0, 2.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 2.0, 1.0, 79000.0],\n",
       " [1.0, 6360.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 1.0, 82000.0],\n",
       " [1.0, 6420.0, 3.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 85000.0],\n",
       " [1.0, 6360.0, 4.0, 2.0, 3.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 100500.0],\n",
       " [1.0, 6540.0, 4.0, 2.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 1.0, 122000.0],\n",
       " [1.0, 6420.0, 3.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 126500.0],\n",
       " [1.0, 6550.0, 4.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 133000.0],\n",
       " [1.0, 5750.0, 3.0, 2.0, 4.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 140000.0],\n",
       " [1.0, 7420.0, 4.0, 2.0, 3.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 190000.0],\n",
       " [1.0, 7160.0, 3.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 2.0, 1.0, 84000.0],\n",
       " [1.0, 4000.0, 3.0, 2.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 97000.0],\n",
       " [1.0, 9000.0, 4.0, 2.0, 4.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 103500.0],\n",
       " [1.0, 6550.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 112500.0],\n",
       " [1.0, 13200.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 140000.0],\n",
       " [1.0, 7085.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 2.0, 1.0, 74700.0],\n",
       " [1.0, 6600.0, 4.0, 2.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 78000.0],\n",
       " [1.0, 6900.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 78900.0],\n",
       " [1.0, 11460.0, 3.0, 1.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 83900.0],\n",
       " [1.0, 7020.0, 3.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 85000.0],\n",
       " [1.0, 6540.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 2.0, 1.0, 85000.0],\n",
       " [1.0, 8000.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 1.0, 86000.0],\n",
       " [1.0, 9620.0, 3.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 2.0, 1.0, 86900.0],\n",
       " [1.0, 10500.0, 3.0, 2.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 94500.0],\n",
       " [1.0, 5020.0, 3.0, 1.0, 4.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 96000.0],\n",
       " [1.0, 7440.0, 3.0, 2.0, 4.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 106000.0],\n",
       " [1.0, 6600.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 72000.0],\n",
       " [1.0, 7200.0, 3.0, 1.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 74500.0],\n",
       " [1.0, 6710.0, 3.0, 2.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 77000.0],\n",
       " [1.0, 6660.0, 4.0, 2.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 80750.0],\n",
       " [1.0, 7000.0, 3.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 2.0, 1.0, 82900.0],\n",
       " [1.0, 7231.0, 3.0, 1.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 85000.0],\n",
       " [1.0, 7410.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 1.0, 92500.0],\n",
       " [1.0, 7800.0, 3.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 76000.0],\n",
       " [1.0, 6825.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 77500.0],\n",
       " [1.0, 6360.0, 3.0, 1.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 80000.0],\n",
       " [1.0, 6600.0, 4.0, 2.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 80000.0],\n",
       " [1.0, 6900.0, 3.0, 2.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 86000.0],\n",
       " [1.0, 6600.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 2.0, 1.0, 87000.0],\n",
       " [1.0, 6420.0, 3.0, 1.0, 3.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 87500.0],\n",
       " [1.0, 6600.0, 3.0, 2.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 89000.0],\n",
       " [1.0, 6600.0, 3.0, 2.0, 3.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 89900.0],\n",
       " [1.0, 9000.0, 3.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 90000.0],\n",
       " [1.0, 6500.0, 3.0, 2.0, 3.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 95000.0],\n",
       " [1.0, 6360.0, 3.0, 2.0, 4.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 112000.0],\n",
       " [1.0, 5300.0, 3.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 31900.0],\n",
       " [1.0, 2850.0, 3.0, 2.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 52000.0],\n",
       " [1.0, 6400.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 90000.0],\n",
       " [1.0, 11175.0, 3.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 100000.0],\n",
       " [1.0, 6750.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 2.0, 1.0, 91700.0],\n",
       " [1.0, 7500.0, 4.0, 2.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 3.0, 1.0, 174500.0],\n",
       " [1.0, 6000.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 94700.0],\n",
       " [1.0, 10240.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 68000.0],\n",
       " [1.0, 5136.0, 3.0, 1.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 80000.0],\n",
       " [1.0, 3400.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 2.0, 1.0, 61100.0],\n",
       " [1.0, 2880.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 62900.0],\n",
       " [1.0, 3840.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 65500.0],\n",
       " [1.0, 2870.0, 2.0, 1.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 66000.0],\n",
       " [1.0, 5320.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 49500.0],\n",
       " [1.0, 3512.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 50000.0],\n",
       " [1.0, 3480.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 53500.0],\n",
       " [1.0, 3600.0, 3.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 58550.0],\n",
       " [1.0, 3520.0, 2.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 64500.0],\n",
       " [1.0, 5320.0, 3.0, 1.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 65000.0],\n",
       " [1.0, 6040.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 69000.0],\n",
       " [1.0, 11410.0, 2.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 73000.0],\n",
       " [1.0, 8400.0, 3.0, 1.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 1.0, 75000.0],\n",
       " [1.0, 5300.0, 4.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 75000.0],\n",
       " [1.0, 7800.0, 3.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 132000.0],\n",
       " [1.0, 3520.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 60000.0],\n",
       " [1.0, 5360.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 65000.0],\n",
       " [1.0, 6862.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 69000.0],\n",
       " [1.0, 3520.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 51900.0],\n",
       " [1.0, 4050.0, 2.0, 1.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 57000.0],\n",
       " [1.0, 3520.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 65000.0],\n",
       " [1.0, 4400.0, 4.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 79500.0],\n",
       " [1.0, 5720.0, 2.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 72500.0],\n",
       " [1.0, 11440.0, 4.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 104900.0],\n",
       " [1.0, 7482.0, 3.0, 2.0, 3.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 114900.0],\n",
       " [1.0, 5500.0, 4.0, 2.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 120000.0],\n",
       " [1.0, 4320.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 58000.0],\n",
       " [1.0, 5400.0, 2.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 67000.0],\n",
       " [1.0, 4320.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 67000.0],\n",
       " [1.0, 4815.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 69000.0],\n",
       " [1.0, 6100.0, 3.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 73000.0],\n",
       " [1.0, 7980.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 73500.0],\n",
       " [1.0, 6050.0, 3.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 74900.0],\n",
       " [1.0, 3800.0, 3.0, 1.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 75000.0],\n",
       " [1.0, 5400.0, 5.0, 1.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 79500.0],\n",
       " [1.0, 6000.0, 3.0, 2.0, 4.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 120900.0],\n",
       " [1.0, 2398.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 44555.0],\n",
       " [1.0, 2145.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 47000.0],\n",
       " [1.0, 2145.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 47600.0],\n",
       " [1.0, 2145.0, 3.0, 1.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 49000.0],\n",
       " [1.0, 2610.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 49000.0],\n",
       " [1.0, 1950.0, 3.0, 2.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 49000.0],\n",
       " [1.0, 2145.0, 3.0, 1.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 49500.0],\n",
       " [1.0, 2275.0, 3.0, 1.0, 3.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 52000.0],\n",
       " [1.0, 2856.0, 3.0, 1.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 54000.0],\n",
       " [1.0, 2015.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 55000.0],\n",
       " [1.0, 2176.0, 2.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 55000.0],\n",
       " [1.0, 2145.0, 4.0, 2.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 56000.0],\n",
       " [1.0, 2145.0, 3.0, 1.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 60000.0],\n",
       " [1.0, 2787.0, 3.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 60500.0],\n",
       " [1.0, 9500.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 3.0, 1.0, 50000.0],\n",
       " [1.0, 4990.0, 4.0, 2.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 64900.0],\n",
       " [1.0, 6670.0, 3.0, 1.0, 3.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 93000.0],\n",
       " [1.0, 6254.0, 4.0, 2.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 85000.0],\n",
       " [1.0, 10360.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 61500.0],\n",
       " [1.0, 5500.0, 3.0, 2.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 2.0, 1.0, 88500.0],\n",
       " [1.0, 5450.0, 4.0, 2.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 88000.0],\n",
       " [1.0, 5500.0, 3.0, 1.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 89000.0],\n",
       " [1.0, 6000.0, 4.0, 1.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 89500.0],\n",
       " [1.0, 5700.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 1.0, 95000.0],\n",
       " [1.0, 6600.0, 2.0, 2.0, 4.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 95500.0],\n",
       " [1.0, 4000.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 51500.0],\n",
       " [1.0, 4880.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 62900.0],\n",
       " [1.0, 4880.0, 4.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 118500.0],\n",
       " [1.0, 8050.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 42900.0],\n",
       " [1.0, 8100.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 44100.0],\n",
       " [1.0, 5880.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 47000.0],\n",
       " [1.0, 5880.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 50000.0],\n",
       " [1.0, 12944.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 50000.0],\n",
       " [1.0, 6020.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 53000.0],\n",
       " [1.0, 4050.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 53000.0],\n",
       " [1.0, 8400.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 54000.0],\n",
       " [1.0, 5600.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 58500.0],\n",
       " [1.0, 5985.0, 3.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 59000.0],\n",
       " [1.0, 4500.0, 3.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 60000.0],\n",
       " [1.0, 4920.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 62900.0],\n",
       " [1.0, 8250.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 64000.0],\n",
       " [1.0, 8400.0, 4.0, 1.0, 4.0, 1.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 65000.0],\n",
       " [1.0, 6440.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 67900.0],\n",
       " [1.0, 8100.0, 4.0, 1.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 68500.0],\n",
       " [1.0, 6720.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 70000.0],\n",
       " [1.0, 5948.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 70500.0],\n",
       " [1.0, 8150.0, 3.0, 2.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 71500.0],\n",
       " [1.0, 4800.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 71900.0],\n",
       " [1.0, 9800.0, 4.0, 2.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 75000.0],\n",
       " [1.0, 8520.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 75000.0],\n",
       " [1.0, 8372.0, 3.0, 1.0, 3.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 87000.0],\n",
       " [1.0, 4040.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 64000.0],\n",
       " [1.0, 4646.0, 3.0, 1.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 2.0, 0.0, 70000.0],\n",
       " [1.0, 4775.0, 4.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 47500.0],\n",
       " [1.0, 4950.0, 4.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 62600.0],\n",
       " [1.0, 5010.0, 3.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 66000.0],\n",
       " [1.0, 6060.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 58900.0],\n",
       " [1.0, 3584.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 53000.0],\n",
       " [1.0, 6000.0, 3.0, 2.0, 3.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 95000.0],\n",
       " [1.0, 6000.0, 4.0, 2.0, 4.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 96500.0],\n",
       " [1.0, 6240.0, 4.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 101000.0],\n",
       " [1.0, 6000.0, 3.0, 2.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 102000.0],\n",
       " [1.0, 7680.0, 4.0, 2.0, 4.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 103000.0],\n",
       " [1.0, 6000.0, 4.0, 2.0, 4.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 105000.0],\n",
       " [1.0, 6000.0, 4.0, 2.0, 4.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 108000.0],\n",
       " [1.0, 6000.0, 4.0, 2.0, 4.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 110000.0],\n",
       " [1.0, 6000.0, 4.0, 2.0, 4.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 113000.0],\n",
       " [1.0, 7475.0, 3.0, 2.0, 4.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 120000.0],\n",
       " [1.0, 5150.0, 3.0, 2.0, 4.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 105000.0],\n",
       " [1.0, 6325.0, 3.0, 1.0, 4.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 106000.0],\n",
       " [1.0, 6000.0, 3.0, 2.0, 4.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 107500.0],\n",
       " [1.0, 6000.0, 3.0, 2.0, 3.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 108000.0],\n",
       " [1.0, 6000.0, 3.0, 1.0, 4.0, 1.0, 1.0, 0.0, 0.0, 1.0, 2.0, 0.0, 113750.0],\n",
       " [1.0, 7000.0, 3.0, 1.0, 4.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 120000.0],\n",
       " [1.0, 12900.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 70000.0],\n",
       " [1.0, 7686.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 71000.0],\n",
       " [1.0, 5000.0, 3.0, 1.0, 3.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 82000.0],\n",
       " [1.0, 5800.0, 3.0, 2.0, 4.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 82000.0],\n",
       " [1.0, 6000.0, 3.0, 2.0, 4.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 82500.0],\n",
       " [1.0, 4800.0, 3.0, 1.0, 3.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 83000.0],\n",
       " [1.0, 6500.0, 3.0, 2.0, 3.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 84000.0],\n",
       " [1.0, 7320.0, 4.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 85000.0],\n",
       " [1.0, 6525.0, 3.0, 2.0, 4.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 85000.0],\n",
       " [1.0, 4800.0, 3.0, 2.0, 4.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 91500.0],\n",
       " [1.0, 6000.0, 3.0, 2.0, 4.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 94000.0],\n",
       " [1.0, 6000.0, 3.0, 2.0, 4.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 103000.0],\n",
       " [1.0, 6000.0, 3.0, 2.0, 2.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 105000.0],\n",
       " [1.0, 6000.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 105000.0]]"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Your Code here\n",
    "import numpy as np\n",
    "\n",
    "data = []\n",
    "\n",
    "with open('windsor_housing.csv', newline='') as csvfile: # reading csv file\n",
    "    reader = csv.reader(csvfile, delimiter=',')\n",
    "    next(reader)\n",
    "    for row in reader: \n",
    "        one = [1.0]\n",
    "        for i in row:\n",
    "            one.append(float(i))\n",
    "        data.append(one)            \n",
    "\n",
    "data = data[1:]\n",
    "data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 2: Perform a 80/20 test train Split\n",
    "\n",
    "Explore NumPy's official documentation to manually split a dataset using `numpy.random.shuffle()`,  `numpy.random.permutations()` or using simple resampling method. \n",
    "* Perform a **RANDOM** 80/20 split on data using a method of your choice , in NumPy using one of the methods above. \n",
    "* Create x_test, y_test, x_train and y_train arrays from the split data.\n",
    "* Inspect the contents to see if the split performed as expected. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(109,)"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Figuring out 80/20 proportions\n",
    "len(data) # 546\n",
    "num = 546\n",
    "num*.80 # 80% = 436.8\n",
    "num*.20 # 20% = 109.2\n",
    "\n",
    "# Randomizing data\n",
    "data = np.random.permutation(data)\n",
    "\n",
    "# Assigning training to 80% and test to 20% of randomized data\n",
    "training = data[:437]\n",
    "test = data[:109]\n",
    "\n",
    "# Creating x_test, y_test, x_train, and y_train arrays from split data\n",
    "# xs = features\n",
    "# ys = target\n",
    "\n",
    "x_train = training[:,:-1]\n",
    "y_train = training[:,-1]\n",
    "\n",
    "x_test = test[:,:-1]\n",
    "y_test = test[:,-1]\n",
    "\n",
    "# Confirming shapes\n",
    "# data.shape \n",
    "# training.shape\n",
    "# test.shape\n",
    "# x_train.shape\n",
    "# y_train.shape\n",
    "# x_test.shape\n",
    "# y_test.shape\n",
    "\n",
    "# ANSWERS:\n",
    "# Raw data Shape:  (546, 13)\n",
    "# Train/Test Split: (437, 13) (109, 13)\n",
    "# x_train, y_train, x_test, y_test: (437, 12) (437,) (109, 12) (109,)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 3: Calculate the `beta` \n",
    "\n",
    "With our X and y in place, We can now compute our beta values with x_train and y_train as:\n",
    "#### $\\beta$ = (x_train<sup>T</sup> . x_train)<sup>-1</sup> . x_train<sup>T</sup> . y_train \n",
    "\n",
    "* Using numpy operations (transpose, inverse) that we saw earlier, compute the above equation in steps.\n",
    "* Print your beta values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [],
   "source": [
    "# first part\n",
    "xxt = x_train.T # transposing x-train\n",
    "first_dot = xxt.dot(x_train) # taking the dot product of transposed x_train and x_train\n",
    "inv = np.linalg.inv(first_dot) # (x_trainT . x_train)-1 # taking the inverse of the dot product above\n",
    "\n",
    "# second & third parts\n",
    "beta = inv.dot(xxt).dot(y_train) # . x_trainT . y_train # chaining dot products to finish out equation\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 4: Make Predictions\n",
    "Great , we now have a set of coefficients that describe the linear mappings between X and y. We can now use the calculated beta values  with the test datasets that we left out to calculate y predictions. \n",
    "For this we need to perform the following tasks:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we shall all features in each row in turn and multiply it with the beta computed above. The result will give a prediction for each row which we can append to a new array of predictions.\n",
    "\n",
    "#### $\\hat{y}$ = x.$\\beta$ = $\\beta$<sub>0</sub> + $\\beta$<sub>1</sub> . x<sub>1</sub> + $\\beta$<sub>2</sub> . x<sub>2</sub> + .. + $\\beta$<sub>m</sub> . x<sub>m</sub>\n",
    "\n",
    "\n",
    "* Create new empty list (y_pred) for saving predictions.\n",
    "* For each row of x_test, take the dot product of the row with beta to calculate the prediction for that row.\n",
    "* Append the predictions to y_pred.\n",
    "* Print the new set of predictions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [],
   "source": [
    "def prediction(nparray):\n",
    "    y_pred = []\n",
    "    for i in nparray:\n",
    "        dot_prod = i.dot(beta)\n",
    "        y_pred.append(dot_prod)\n",
    "    return y_pred\n",
    "\n",
    "y_pred = prediction(x_test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 5: Evaluate Model \n",
    "\n",
    "### Visualize Actual vs. Predicted\n",
    "This is exciting, so now our model can use the beta value to predict the price of houses given the input features. Let's plot these predictions against the actual values in y_test to see how much our model deviates. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot predicted and actual values as line plots\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "plt.plot(y_pred)\n",
    "plt.plot(y_test)\n",
    "\n",
    "\n",
    "\n",
    "plt.show()\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](diff.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This doesn't look so bad, does it ? Our model, although isn't perfect at this stage, is making a good attempt to predict house prices although a few prediction seem a bit out. There could a number of reasons for this. Let's try to dig a bit deeper to check model's predictive abilities by comparing these prediction with actual values of y_test individually. That will help us calculate the RMSE value (Root Mean Squared Error) for our model. \n",
    "### Root Mean Squared Error\n",
    "Here is the formula for this again. \n",
    "\n",
    "![](rmse.jpg)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Initialize an empty array `err`.\n",
    "* for each row in y_test and y_pred, take the squared difference and append error for each row in err array. \n",
    "* Calculate RMSE from `err` using the formula shown above. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "17237.48"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import math\n",
    "        \n",
    "err = []\n",
    "for pred,actual in zip(y_pred,y_test):\n",
    "    sq_err = (pred - actual) ** 2\n",
    "    err.append(sq_err)\n",
    "    \n",
    "mean = np.array(err).mean()\n",
    "\n",
    "rmse = round(math.sqrt(mean),2)\n",
    "rmse\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Normalized Root Mean Squared Error\n",
    "The above error is clearly in terms of the dependant variable i.e. the final house price. We can also use a normlized mean squared error in case of multiple regression which can be calculated from RMSE using following formula:\n",
    "\n",
    "* Calculate normalized Root Mean Squared Error"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"nrmse.png\" width=300>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.10575141104294478"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# this is \"min-max normalization\"\n",
    "\n",
    "nrmse = rmse / (max(y_test) - min(y_test))\n",
    "nrmse\n",
    "\n",
    "# Due to random split, your answers may vary \n",
    "\n",
    "# 0.09940553674399233"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "SO there it is. A complete multiple regression analysis using nothing but numpy. Having good programming skills in numpy would allow to dig deeper into analytical algorithms in machine learning and deep learning. Using matrix multiplication techniques we saw here, we can easily build a whole neural network from scratch. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Level up - Optional \n",
    "\n",
    "* Calculated the R_squared and adjusted R_squared for above experiment. \n",
    "* Plot the residuals (similar to statsmodels) and comment on the variance and heteroscedascticity. \n",
    "* Run the experiment in statsmodels and compare the performance of both approaches in terms of computational cost."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary\n",
    "\n",
    "So there we have it. A predictive model for predicting house prices in a given dataset. Remember this is a very naive implementation of regression modeling. The purpose here was to get an introduction to the applications of linear algebra into machine learning and predictive analysis. We still have a number of shortcomings in our modeling approach and we can further apply a number of data modeling techniques to improve this model. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
=======
>>>>>>> c877fa340889ff461fa39fb6f802601e8fa7a8ec
